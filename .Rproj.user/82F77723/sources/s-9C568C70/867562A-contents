library(cleaninginspectoR)

## Import data
raw_data = read.csv("./output/main_DS_withloop_tobecleaned.csv", stringsAsFactors = F)
raw_data_labels <- read.csv("./input/questionnaire_MSNA_HH_2019-08-29_WITHLABELSTRUE.csv", stringsAsFactors = F)

raw_data_labels = select(raw_data_labels, 
                         c("X_uuid", "X_index", "Dans.quelle.sous.préfecture.l.entretien.est.il.réalisé..",
                           "Dans.quelle.localité.l.entretien.est.il.réalisé..", "Merci.de.préciser", 
                           "Dans.quelle.localité.l.entretien.est.elle.réalisée.."))
colnames(raw_data_labels) = c("X_uuid", "X_index", "admin2", "village", "autre", "localite")
raw_data_labels$localite_visitee = paste(raw_data_labels$localite, raw_data_labels$village, sep="")
raw_data_labels$localite_visitee = ifelse(raw_data_labels$localite_visitee == "Autre",
                                          raw_data_labels$autre, 
                                          raw_data_labels$localite_visitee)

## Create the cleaning log book noting all changes done:
DataCleaningLogBook = matrix(ncol = 8, nrow = 0)
colnames(DataCleaningLogBook) = c("uuid", "index", "question.name", "Issue",	"feedback",	"changed",	"old.value",	"new.value")

### Remove all qst without consent of respondent ####
RM_data_withoutConsent = subset(raw_data, raw_data$consensus_note != "oui")
data_clean = subset(raw_data, !is_in(raw_data$X_uuid, RM_data_withoutConsent$X_uuid))
for (i in 1:nrow(RM_data_withoutConsent)) {
  DataCleaningLogBook = rbind(DataCleaningLogBook,
                              c(RM_data_withoutConsent$X_uuid[i], RM_data_withoutConsent$X_index[i],  
                                "consensus_note", "Pas de consentement", "", "Oui", RM_data_withoutConsent$consensus_note[i], "Qst supprimé de la DB"))
}


## Delete questions with sensitive data :
data_clean = subset( data_clean, select = -c(q0_1_enqueteur,diviceid, gpslocation_hh, X_gpslocation_hh_latitude,
                                             X_gpslocation_hh_longitude, X_gpslocation_hh_altitude, X_gpslocation_hh_precision))
DataCleaningLogBook = rbind(DataCleaningLogBook,
                            c("Toutes les questions q0_1_enqueteur", "q0_1_enqueteur",  
                              "q0_1_enqueteur", "Données sensibles", "", "Oui", "", "Question supprimée de la DB"))
DataCleaningLogBook = rbind(DataCleaningLogBook,
                            c("Toutes les questions diviceid", "diviceid",  
                              "diviceid", "Données sensibles", "", "Oui", "", "Question supprimée de la DB"))
DataCleaningLogBook = rbind(DataCleaningLogBook,
                            c("Toutes les questions gpslocation_hh", "gpslocation_hh",  
                              "gpslocation_hh", "Données sensibles", "", "Oui", "", "Question supprimée de la DB"))


## Delete questions about children OOH (protec_8) and discriminate access (protect_12) due to misundertood
data_clean = subset( data_clean, select = -c(protect_8,protect_8_1, protect_8_1_filles, protect_8_1_garcons, protect_8_2,
                                             protect_8_2.mariage, protect_8_2.travail, protect_8_2.etudes, protect_8_2.armee,
                                             protect_8_2.disparition, protect_8_2.detention, protect_8_2.deces_ap_2013, 
                                             protect_8_2.deces_av_2013, protect_8_2.autre, protect_8_2.nsp, protect_8_2.perte,
                                             protect_8_2.ailleurs_famille, protect_8_2.deces_lien_conflit, protect_8_2_autre))
data_clean = subset( data_clean, select = -c(protect_12,protect_12_1, protect_12_2, protect_12_3, protect_12_4))
DataCleaningLogBook = rbind(DataCleaningLogBook,
                            c("Toutes les questions protect_8", "Toutes les questions protect_8",  
                              "protect_8, protec_8_1, protect_8_2", "Qst mal posée / mal comprise", "", "Oui", "", "Question supprimée de la DB"))
DataCleaningLogBook = rbind(DataCleaningLogBook,
                            c("Toutes les questions protect_12", "Toutes les questions protect_12",  
                              "protect_12, protect_12_1 à protect_12_4", "Qst mal posée / mal comprise", "", "Oui", "", "Question supprimée de la DB"))



## Remove all columns with only NA
na_column_deleted = c()
for (i in 1: ncol(data_clean)){
  if(colSums(!is.na(data_clean[i])) == 0){
    na_column_deleted = c(na_column_deleted, colSums(!is.na(data_clean[i])))
  }
}
data_clean = data_clean[colSums(!is.na(data_clean)) > 0]



### Methodology;
## 1. Check incoherent data and modify it if possible
## 2. Count and note all incoherent data by qst 
## 3. Delete the entire qst if 'max_incoherence' incoherences or more (can be defined here below)
max_incoheherence = 4


### If no "q0_2_date" (Date de l'entretien), then replace 'q0_2_date' with 'today' (the date at which the questionnaire started) ####
for (i in 1:nrow(data_clean)) {
  if(data_clean[, "q0_2_date"][i] == ""){
    data_clean$q0_2_date[i] = data_clean$today[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "q0_2_date", "Réponse non saisie", "Remplacé par la date du début du qst", 
                                                       "Oui & compté incohérent", "",  data_clean$today[i]))
  }
}

### If negative or 0 number of total HH member, then delete qst (no information in the loop) ####
RM_data_no_or_neg_HHMember = subset(data_clean, data_clean$ig_6_HH_membres_tot <= 0)
data_clean = subset(data_clean, !is_in(data_clean$X_uuid, RM_data_no_or_neg_HHMember$X_uuid))
for (i in 1:nrow(RM_data_no_or_neg_HHMember)) {
  DataCleaningLogBook = rbind(DataCleaningLogBook,
                              c(RM_data_no_or_neg_HHMember$X_uuid[i], RM_data_no_or_neg_HHMember$X_index[i],  
                                "ig_6_HH_membres_tot", "Nb total dans le HH <= 0", "", "Oui", RM_data_no_or_neg_HHMember$ig_6_HH_membres_tot[i], "Qst supprimé de la DB"))
}


### Check duration of qst  - watch-out, some qst lenght are negative... ? ####
#?cleaninginspectoR::check_time
nrow(check_time(data_clean, duration_threshold_lower = 30, duration_threshold_upper = 1000))
check_qst_length = check_time(data_clean, duration_threshold_lower = 30, duration_threshold_upper = 1000)
colnames(check_qst_length)[1] = "X_uuid"
check_qst_length = subset(check_qst_length, check_qst_length$value > 0)
check_qst_length = merge(x = check_qst_length, y = data_clean[ , c("X_index", "X_uuid")], by = "X_uuid", all.x=TRUE)
check_qst_length = merge(x = check_qst_length, y = data_clean[ , c("sum_agegrp_0_17_femmes", "sum_agegrp_0_17_hommes", "X_uuid")], by = "X_uuid", all.x=TRUE)
check_qst_length$sum_agegrp_0_17 = check_qst_length$sum_agegrp_0_17_femmes + check_qst_length$sum_agegrp_0_17_hommes

### Delete if qst length less than 20 minutes and HH has at least one child
RM_check_qst_length_20 = subset(check_qst_length, check_qst_length$value < 20 & check_qst_length$sum_agegrp_0_17 > 0)
data_clean = subset(data_clean, !is_in(data_clean$X_uuid, RM_check_qst_length_20$X_uuid))
for (i in 1:nrow(RM_check_qst_length_20)) {
  DataCleaningLogBook = rbind(DataCleaningLogBook, c(RM_check_qst_length_20$X_uuid[i], RM_check_qst_length_20$X_index[i],  "Time End - Time Start", "Qst dure moins de 20mn avec au moins 1 enfant", "", "Oui", RM_check_qst_length_20$value[i], "Qst supprimé de la DB"))
}
### Count as incoherent if survey lasts less than 30 mn and HH has at least one child
check_qst_length_30 = subset(check_qst_length, check_qst_length$sum_agegrp_0_17 > 0)
for (i in 1:nrow(data_clean)) {
  if(is_in(data_clean$X_uuid[i], check_qst_length_30$X_uuid)){
    qst_length = as.numeric(subset(check_qst_length_30, check_qst_length_30$X_uuid == data_clean$X_uuid[i], stringsAsFactors = FALSE)$value)
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "Time End - Time Start", "Qst dure moins de 30mn avec au moins 1 enfant", "", 
                                                       "Non & compté incohérent", 
                                                       qst_length, ""))
  }
}
### Count as incoherent if survey lasts less than 25 mn and no children
RM_check_qst_length_25 = subset(check_qst_length, check_qst_length$value < 25 & check_qst_length$sum_agegrp_0_17 == 0)
for (i in 1:nrow(data_clean)) {
  if(is_in(data_clean$X_uuid[i], RM_check_qst_length_25$X_uuid)){
    qst_length = as.numeric(subset(RM_check_qst_length_25, RM_check_qst_length_25$X_uuid == data_clean$X_uuid[i], stringsAsFactors = FALSE)$value)
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "Time End - Time Start", "Qst dure moins de 25mn (sans enfant)", "", 
                                                       "Non & compté incohérent", 
                                                       qst_length, ""))
  }
}



# Count as incoherent if loop does not have the respondent included (doesn't have a HH member with same age of respondent) :
# if 18 ans ou moins - compté comme incohérent uniquement (no data on education) - 15 cases solely
# if more than 18 y.o. :
# add + 1 in tot HH members and in corresponding sex and age groupe BUT NOT IF 16-18 BECAUSE NO DATA ON EDUCATION !! 
# add + 1 in $ig_7_gr_vulnerable.nsp == 1 & + 1 add $sante_2_malade_nsp == 1 

for (i in 1:nrow(data_clean)) {
  if(data_clean$loop_Without_Resp[i] == 1 & data_clean$ig_1_age[i] < 19){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "ig_6_HH_membres_tot", "Répondant (18 ans ou moins) probablement non inclu dans la loop", "", 
                                                       "Non & compté incohérent", 
                                                       data_clean$ig_6_HH_membres_tot[i], ""))
  }
  if(data_clean$loop_Without_Resp[i] == 1 & data_clean$ig_1_age[i] >= 19){
    data_clean$ig_6_HH_membres_tot[i] = data_clean$ig_6_HH_membres_tot[i] + 1
    data_clean$sum_agegrp_18plus_femmes[i] = ifelse(data_clean$ig_2_sexe[i] == "femme", data_clean$sum_agegrp_18plus_femmes[i] + 1, data_clean$sum_agegrp_18plus_femmes[i])
    data_clean$sum_agegrp_18plus_hommes[i] = ifelse(data_clean$ig_2_sexe[i] == "homme", data_clean$sum_agegrp_18plus_hommes[i] + 1, data_clean$sum_agegrp_18plus_hommes[i])
    data_clean$sum_ig_7_gr_vulnerable.nsp[i] = data_clean$sum_ig_7_gr_vulnerable.nsp[i] + 1
    data_clean$sum_sante_2_malade_nsp[i] = data_clean$sum_sante_2_malade_nsp[i] + 1
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "ig_6_HH_membres_tot , sum_agegrp_18plus_sex , sum_ig_7_gr_vulnerable.nsp , sum_sante_2_malade_nsp", 
                                                       "Répondant (plus de 18 ans) probablement non inclu dans la loop", "", 
                                                       "Oui & compté incohérent", 
                                                       paste(data_clean$ig_6_HH_membres_tot[i]-1, data_clean$sum_agegrp_18plus_femmes[i]-1, 
                                                             data_clean$sum_ig_7_gr_vulnerable.nsp[i] -1, data_clean$sum_sante_2_malade_nsp[i]-1, sep=" ; "),  
                                                       paste(data_clean$ig_6_HH_membres_tot[i], data_clean$sum_agegrp_18plus_femmes[i] , 
                                                             data_clean$sum_ig_7_gr_vulnerable.nsp[i] -1, data_clean$sum_sante_2_malade_nsp[i], sep=" ; ")))
  }
}


# Count as incoherent if loop has not been filled firstly with the youngest member (only if one member has less than 5 y.o.?)
# and add 'nsp' on location of maternity place:
data_clean$sum_sante_1_accouch_nsp = ifelse(data_clean$loop_wihtout_RightOrderHHMembers_and_NoInfoForMat == 1, data_clean$sum_sante_1_accouch_nsp +1, data_clean$sum_sante_1_accouch_nsp )
data_clean$sum_sante_1_accouch_lieu = ifelse(data_clean$sum_sante_1_accouch_cs == 1, "cs", 
                                             ifelse(data_clean$sum_sante_1_accouch_maison_assiste == 1, "maison_assiste",
                                                    ifelse(data_clean$sum_sante_1_accouch_maison_nonassiste == 1, "maison_non_assiste",
                                                           ifelse(data_clean$sum_sante_1_accouch_autre == 1, "autre", 
                                                                  ifelse(data_clean$sum_sante_1_accouch_nsp == 1, "nsp", NA)))))
#data_clean$sum_sante_1_accouch_lieu = ifelse(data_clean$loop_wihtout_RightOrderHHMembers_and_NoInfoForMat == 1, "nsp", data_clean$sum_sante_1_accouch_lieu)
for (i in 1:nrow(data_clean)) {
  if(data_clean$loop_wihtout_RightOrderHHMembers_and_NoInfoForMat[i] == 1){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "sum_sante_1_accouch_nsp",
                                                       "Enfant < 5 ans non renseigné en premier dans la loop - accés au service de maternité non renseigné", "", 
                                                       "Oui & compté incohérent", 
                                                       data_clean$sum_sante_1_accouch_nsp[i] -1, data_clean$sum_sante_1_accouch_nsp[i]))
  }
}


# NFI :
# Change negative numbers by its positive value
sum(data_clean$serviette_hyg < 0)
for (i in 1:nrow(data_clean)) {
  if(data_clean$savon_toilette_azur[i] < 0){
    data_clean$savon_toilette_azur[i] = -data_clean$savon_toilette_azur[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "savon_toilette_azur",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$savon_toilette_azur[i], data_clean$savon_toilette_azur[i]))
  }
  if(data_clean$savon_lessive[i] < 0){
    data_clean$savon_lessive[i] = -data_clean$savon_lessive[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "savon_lessive",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$savon_lessive[i], data_clean$savon_lessive[i]))
  }
  if(data_clean$pot[i] < 0){
    data_clean$pot[i] = -data_clean$pot[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "pot",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$pot[i], data_clean$pot[i]))
  }
  if(data_clean$gobelet[i] < 0){
    data_clean$gobelet[i] = -data_clean$gobelet[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "gobelet",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$gobelet[i], data_clean$gobelet[i]))
  }
  if(data_clean$serviette_hyg[i] < 0){
    data_clean$serviette_hyg[i] = -data_clean$serviette_hyg[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "serviette_hyg",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$serviette_hyg[i], data_clean$serviette_hyg[i]))
  }
}

# count incoherent if capacity of bidon is not a multiple of 5.
for (i in 1:nrow(data_clean)) {
  if( all(data_clean$bidons_cap[i] %% 5 != 0 ,data_clean$bidons_cap[i] %% 2 != 0 )){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "bidons_cap", "Pas un multiple de 2 ou de 5", "", 
                                                       "Non & compté incohérent", data_clean$bidons_cap[i], ""))
  }
}

### Recode soap data - divide by 200 if multiple of 200 and by 250 if multiple of 250 + gobelet data (divide by 250 if multiple):
for (i in 1:nrow(data_clean)) {
  if(data_clean$savon_toilette_azur[i] != 0 & data_clean$savon_toilette_azur[i] %% 200 == 0){
    data_clean$savon_toilette_azur[i] = data_clean$savon_toilette_azur[i] / 200
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "savon_toilette_azur", "Multiple de 200", "", "Oui & compté incohérent", data_clean$savon_toilette_azur[i] * 200, data_clean$savon_toilette_azur[i]))
  }
}
for (i in 1:nrow(data_clean)) {
  if(data_clean$savon_toilette_azur[i] != 0 & data_clean$savon_toilette_azur[i] %% 250 == 0){
    data_clean$savon_toilette_azur[i] = data_clean$savon_toilette_azur[i] / 250
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "savon_toilette_azur", "Multiple de 250", "", "Oui & compté incohérent", data_clean$savon_toilette_azur[i] * 250, data_clean$savon_toilette_azur[i]))
  }
}

for (i in 1:nrow(data_clean)) {
  if(data_clean$savon_lessive[i] != 0 & data_clean$savon_lessive[i] %% 200 == 0){
    data_clean$savon_lessive[i] = data_clean$savon_lessive[i] / 200
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "savon_lessive", "Multiple de 200", "", "Oui & compté incohérent", data_clean$savon_lessive[i] * 200, data_clean$savon_lessive[i]))
  }
}
for (i in 1:nrow(data_clean)) {
  if(data_clean$savon_lessive[i] != 0 & data_clean$savon_lessive[i] %% 250 == 0){
    data_clean$savon_lessive[i] = data_clean$savon_lessive[i] / 250
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "savon_lessive", "Multiple de 250", "", "Oui & compté incohérent", data_clean$savon_lessive[i] * 250, data_clean$savon_lessive[i]))
  }
}

for (i in 1:nrow(data_clean)) {
  if(data_clean$gobelet[i] != 0 & data_clean$gobelet[i] %% 250 == 0){
    data_clean$gobelet[i] = data_clean$gobelet[i] / 250
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "gobelet", "Multiple de 250", "", "Oui & compté incohérent", data_clean$gobelet[i] * 250, data_clean$gobelet[i]))
  }
}



## Check bidon + taille de l'abri
# Change negative shelther size by its positive number
sum(data_clean$nfi_5_taille_abri < 0)
for (i in 1:nrow(data_clean)) {
  if(data_clean$nfi_5_taille_abri[i] < 0){
    data_clean$nfi_5_taille_abri[i] = -data_clean$nfi_5_taille_abri[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "nfi_5_taille_abri",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", -data_clean$nfi_5_taille_abri[i], data_clean$nfi_5_taille_abri[i]))
  }
}


# Create variable bidon_oui_non :
data_clean$bidons_oui_non = ifelse(data_clean$bidons_cap > 0, "1", "0")
for (i in 1:nrow(data_clean)) {
  if((data_clean$bidons_cap[i] > 0 & data_clean$bidons_cap[i] < 5 ) | 
     (data_clean$bidons_cap[i] > 5 & data_clean$bidons_cap[i] < 10 )){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "bidons_cap",
                                                       "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", data_clean$bidons_cap[i], "NA"))
    data_clean$bidons_cap[i] = NA
  }
}



# Create variable size of HH per person :
data_clean$taille_abri_pp =  data_clean$nfi_5_taille_abri / data_clean$nfi_4_personnes_abri

## Check expenses : 
#table(data_clean$mssc_3_dep_30J_eau)
# Change negative expenses by its positive number
for (i in 1:nrow(data_clean)) {
  if(data_clean$mssc_3_dep_30J_alim[i] < 0){
    data_clean$mssc_3_dep_30J_alim[i] = -data_clean$mssc_3_dep_30J_alim[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_alim",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_3_dep_30J_alim[i], data_clean$mssc_3_dep_30J_alim[i]))
  }
  if(data_clean$mssc_3_dep_30J_alim[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_alim",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_3_dep_30J_alim[i], ""))
  }
  if(data_clean$mssc_3_dep_30J_elec[i] < 0){
    data_clean$mssc_3_dep_30J_elec[i] = -data_clean$mssc_3_dep_30J_elec[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_elec",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_3_dep_30J_elec[i], data_clean$mssc_3_dep_30J_elec[i]))
  }
  if(data_clean$mssc_3_dep_30J_elec[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_elec",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_3_dep_30J_elec[i], ""))
  }
  if(data_clean$mssc_3_dep_30J_eau[i] < 0){
    data_clean$mssc_3_dep_30J_eau[i] = -data_clean$mssc_3_dep_30J_eau[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_eau",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_3_dep_30J_eau[i], data_clean$mssc_3_dep_30J_eau[i]))
  }
  if(data_clean$mssc_3_dep_30J_eau[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_eau",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_3_dep_30J_eau[i], ""))
  }
  if(data_clean$mssc_3_dep_30J_logement[i] < 0){
    data_clean$mssc_3_dep_30J_logement[i] = -data_clean$mssc_3_dep_30J_logement[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_logement",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_3_dep_30J_logement[i], data_clean$mssc_3_dep_30J_logement[i]))
  }
  if(data_clean$mssc_3_dep_30J_logement[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_logement",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_3_dep_30J_logement[i], ""))
  }
  if(data_clean$mssc_3_dep_30J_tel[i] < 0){
    data_clean$mssc_3_dep_30J_tel[i] = -data_clean$mssc_3_dep_30J_tel[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_tel",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_3_dep_30J_tel[i], data_clean$mssc_3_dep_30J_tel[i]))
  }
  if(data_clean$mssc_3_dep_30J_tel[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_tel",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_3_dep_30J_tel[i], ""))
  }
  if(data_clean$mssc_3_dep_30J_comb[i] < 0){
    data_clean$mssc_3_dep_30J_comb[i] = -data_clean$mssc_3_dep_30J_comb[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_comb",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_3_dep_30J_comb[i], data_clean$mssc_3_dep_30J_comb[i]))
  }
  if(data_clean$mssc_3_dep_30J_comb[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_comb",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_3_dep_30J_comb[i], ""))
  }
  if(data_clean$mssc_3_dep_30J_transport[i] < 0){
    data_clean$mssc_3_dep_30J_transport[i] = -data_clean$mssc_3_dep_30J_transport[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_transport",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_3_dep_30J_transport[i], data_clean$mssc_3_dep_30J_transport[i]))
  }
  if(data_clean$mssc_3_dep_30J_transport[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_transport",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_3_dep_30J_transport[i], ""))
  }
  if(data_clean$mssc_3_dep_30J_hyg[i] < 0){
    data_clean$mssc_3_dep_30J_hyg[i] = -data_clean$mssc_3_dep_30J_hyg[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_hyg",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_3_dep_30J_hyg[i], data_clean$mssc_3_dep_30J_hyg[i]))
  }
  if(data_clean$mssc_3_dep_30J_hyg[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_hyg",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_3_dep_30J_hyg[i], ""))
  }
  if(data_clean$mssc_3_dep_30J_tabac_alc[i] < 0){
    data_clean$mssc_3_dep_30J_tabac_alc[i] = -data_clean$mssc_3_dep_30J_tabac_alc[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_tabac_alc",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_3_dep_30J_tabac_alc[i], data_clean$mssc_3_dep_30J_tabac_alc[i]))
  }
  if(data_clean$mssc_3_dep_30J_tabac_alc[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_3_dep_30J_tabac_alc",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_3_dep_30J_tabac_alc[i], ""))
  }
  if(data_clean$mssc_4_dep_6M_sante[i] < 0){
    data_clean$mssc_4_dep_6M_sante[i] = -data_clean$mssc_4_dep_6M_sante[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_sante",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_4_dep_6M_sante[i], data_clean$mssc_4_dep_6M_sante[i]))
  }
  if(data_clean$mssc_4_dep_6M_sante[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_sante",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_4_dep_6M_sante[i], ""))
  }
  if(data_clean$mssc_4_dep_6M_vet[i] < 0){
    data_clean$mssc_4_dep_6M_vet[i] = -data_clean$mssc_4_dep_6M_vet[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_vet",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_4_dep_6M_vet[i], data_clean$mssc_4_dep_6M_vet[i]))
  }
  if(data_clean$mssc_4_dep_6M_vet[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_vet",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_4_dep_6M_vet[i], ""))
  }
  if(data_clean$mssc_4_dep_6M_educ[i] < 0){
    data_clean$mssc_4_dep_6M_educ[i] = -data_clean$mssc_4_dep_6M_educ[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_educ",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_4_dep_6M_educ[i], data_clean$mssc_4_dep_6M_educ[i]))
  }
  if(data_clean$mssc_4_dep_6M_educ[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_educ",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_4_dep_6M_educ[i], ""))
  }
  if(data_clean$mssc_4_dep_6M_dettes[i] < 0){
    data_clean$mssc_4_dep_6M_dettes[i] = -data_clean$mssc_4_dep_6M_dettes[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_dettes",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_4_dep_6M_dettes[i], data_clean$mssc_4_dep_6M_dettes[i]))
  }
  if(data_clean$mssc_4_dep_6M_dettes[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_dettes",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_4_dep_6M_dettes[i], ""))
  }
  if(data_clean$mssc_4_dep_6M_construction_log[i] < 0){
    data_clean$mssc_4_dep_6M_construction_log[i] = -data_clean$mssc_4_dep_6M_construction_log[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_construction_log",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_4_dep_6M_construction_log[i], data_clean$mssc_4_dep_6M_construction_log[i]))
  }
  if(data_clean$mssc_4_dep_6M_construction_log[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_construction_log",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_4_dep_6M_construction_log[i], ""))
  }
  if(data_clean$mssc_4_dep_6M_fete[i] < 0){
    data_clean$mssc_4_dep_6M_fete[i] = -data_clean$mssc_4_dep_6M_fete[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_fete",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_4_dep_6M_fete[i], data_clean$mssc_4_dep_6M_fete[i]))
  }
  if(data_clean$mssc_4_dep_6M_fete[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_fete",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_4_dep_6M_fete[i], ""))
  }
  if(data_clean$mssc_4_dep_6M_intr_agr[i] < 0){
    data_clean$mssc_4_dep_6M_intr_agr[i] = -data_clean$mssc_4_dep_6M_intr_agr[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_intr_agr",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_4_dep_6M_intr_agr[i], data_clean$mssc_4_dep_6M_intr_agr[i]))
  }
  if(data_clean$mssc_4_dep_6M_intr_agr[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_intr_agr",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_4_dep_6M_intr_agr[i], ""))
  }
  if(data_clean$mssc_4_dep_6M_intr_el[i] < 0){
    data_clean$mssc_4_dep_6M_intr_el[i] = -data_clean$mssc_4_dep_6M_intr_el[i]
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_intr_el",
                                                       "Saisie incorrecte de la réponse (négative)", "", "Oui & compté incohérent", 
                                                       -data_clean$mssc_4_dep_6M_intr_el[i], data_clean$mssc_4_dep_6M_intr_el[i]))
  }
  if(data_clean$mssc_4_dep_6M_intr_el[i] %% 5 != 0){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "mssc_4_dep_6M_intr_el",
                                                       "Saisie incorrecte de la réponse (Pas un multiple de 5)", "", "Non & compté incohérent", 
                                                       data_clean$mssc_4_dep_6M_intr_el[i], ""))
  }
}

# Replace mssc_3_depense_totale si total is different
for (i in 1:nrow(data_clean)){
  data_clean$mssc_3_depense_totale[i] = data_clean$mssc_3_dep_30J_alim[i] + data_clean$mssc_3_dep_30J_elec[i] + data_clean$mssc_3_dep_30J_eau[i] +
    data_clean$mssc_3_dep_30J_logement[i] + data_clean$mssc_3_dep_30J_tel[i] + data_clean$mssc_3_dep_30J_comb[i] + data_clean$mssc_3_dep_30J_transport[i] + 
    data_clean$mssc_3_dep_30J_hyg[i] + data_clean$mssc_3_dep_30J_tabac_alc[i]
}




## Check SecAl - Remove if a HH has eaten no food category over the last 7 days : 
RM_fcs_0 = subset(data_clean, data_clean$secal_1_cereales == 0 & data_clean$secal_1_legumineuse == 0 &  data_clean$secal_1_lait == 0 &  
                    data_clean$secal_1_viande == 0 & data_clean$secal_1_legumes == 0 &  data_clean$secal_1_fruits == 0)
data_clean = subset(data_clean, !is_in(data_clean$X_uuid, RM_fcs_0$X_uuid))
for (i in 1:nrow(RM_fcs_0)) {
  DataCleaningLogBook = rbind(DataCleaningLogBook,
                              c(RM_fcs_0$X_uuid[i], RM_fcs_0$X_index[i],  
                                "secal_1", "N'a consommé aucun produits alimentaires (des 6 cat principales)", "", "Oui", "0", "Qst supprimé de la DB"))
}


# Count incoherent if only 7 (without oil, sugar and spices):
for (i in 1:nrow(data_clean)) {
  if(data_clean$secal_1_cereales[i] == 7 & data_clean$secal_1_legumineuse[i] == 7 &  data_clean$secal_1_lait[i] == 7 &  data_clean$secal_1_viande[i] == 7 & 
     data_clean$secal_1_legumes[i] == 7 &  data_clean$secal_1_fruits[i] == 7){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "secal_1",
                                                       "A consommé tous les produits alimentaires tous les jours (des 6 cat principales)", "", "Non & compté incohérent", 
                                                       "Que des 7", ""))
  }
}



# Check secal_6_agric 'Votre ménage pratique-t-il l'agriculture au cours de cette saison de faéon optimale é' - what if they do not do agriculture é 
#table((data_clean$mssc_2_source_rev_1 != "agric" & data_clean$mssc_2_source_rev_2 != "agric" & data_clean$mssc_2_source_rev_2 != "agric" ), data_clean$secal_6_agric)
#
#for (i in 1:nrow(data_clean)) {
#  if(data_clean$mssc_2_source_rev_1[i] != "agric" & data_clean$mssc_2_source_rev_2[i] != "agric" & data_clean$mssc_2_source_rev_2[i] != "agric" &  
#   data_clean$secal_6_agric[i] == "oui"){
#  DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "secal_6_agric",
#                                                     "N'a pas en source de revenu 'agriculture' mais dit pratiquer de maniére optimale", "", "Non & compté incohérent", 
#                                                     "", ""))
#  }
#}

# Check lavage de main + environmental_sanit
for (i in 1:nrow(data_clean)) {
  if(data_clean$wash_18_lavage_main_moment.apres_toilette[i] == 1 & data_clean$wash_18_lavage_main_moment.apres_nettoyage[i] == 1 &
     data_clean$wash_18_lavage_main_moment.avant_cuisiner[i] == 1 & data_clean$wash_18_lavage_main_moment.avant_manger[i] == 1 &
     data_clean$wash_18_lavage_main_moment.avant_allaitement[i] == 1 & data_clean$wash_18_lavage_main_moment.apres_champs[i] == 1){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "wash_18_lavage_main_moment",
                                                       "A choisi toutes les réponses possibles", "", "Non & compté incohérent", 
                                                       "", ""))
  }
  if(data_clean$wash_20_dechets[i] == "oui" & data_clean$wash_20_excrements[i] == "oui"  &
     data_clean$wash_20_eau_stagnante[i] == "oui" & data_clean$wash_20_animaux_morts[i] == "oui" &
     data_clean$wash_20_rongeurs[i] == "oui" & data_clean$wash_20_autres[i] == "oui" ){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "wash_20",
                                                       "A choisi toutes les réponses possibles", "", "Non & compté incohérent", 
                                                       "", ""))
  }
}



# Check detresse psycho
data_clean$sum_agegrp_0_17 = data_clean$sum_agegrp_0_17_femmes + data_clean$sum_agegrp_0_17_hommes 
data_clean$sum_agegrp_18plus = data_clean$sum_agegrp_18plus_femmes + data_clean$sum_agegrp_18plus_hommes 

for (i in 1:nrow(data_clean)) {
  if(data_clean$protect_11[i] == "oui" & data_clean$protect_11_1[i] > data_clean$sum_agegrp_0_17[i]){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "protect_11_1",
                                                       "Plus d'enfants en détresse psychologique que nb total d'enfants", "", "Non & compté incohérent", 
                                                       data_clean$protect_11_1[i], ""))
  }
  if(data_clean$protect_11[i] == "oui" & data_clean$protect_11_2[i] > data_clean$sum_agegrp_18plus[i]){
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], "protect_11_2",
                                                       "Plus d'adultes en détresse psychologique que nb total d'adultes", "", "Non & compté incohérent", 
                                                       data_clean$protect_11_2[i], ""))
  }
}



### Check for outliers ####
outliers = find_outliers(data_clean)
colnames(outliers)
for (i in 1:nrow(outliers)){
  outliers$X_index[i] = data_clean$X_index[outliers$index[i]]
}

outliers = merge(x = outliers, y = data_clean[ , c("X_index", "X_uuid")], by = "X_index", all.x=TRUE)

## Check variables with outliers and don't take into account what does not make sense :
unique(outliers$variable)
outliers = subset(outliers,
                  outliers$variable != "diviceid" &
                    outliers$variable != "sum_agegrp_0_17_femmes" &
                    outliers$variable != "sum_agegrp_0_17_hommes" &
                    outliers$variable != "sum_agegrp_4_18" &
                    outliers$variable != "sum_agegrp_18plus_hommes" &
                    outliers$variable != "x_gpslocation_hh" &
                    outliers$variable != "x_gpslocation_hh_latitude" &
                    outliers$variable != "X_gpslocation_hh_longitude" &
                    outliers$variable != "X_gpslocation_hh_altitude" &
                    outliers$variable != "X_gpslocation_hh_precision")

### Delete if more than 3 outliers 
outliers_index=c()
outliers_uuid=c()
outliers_qst=c()
outliers_value=c()

for(i in 1:length(unique(outliers$X_index))){
  if(as.data.frame(table(outliers$X_index))$Freq[i] > 3){
    outliers_index = c(outliers_index, as.integer(as.data.frame(table(outliers$X_index), stringsAsFactors = F)$Var1[[i]]))
    outliers_uuid =  c(outliers_uuid, subset(outliers, outliers$X_index == as.integer(as.data.frame(table(outliers$X_index), stringsAsFactors = F)$Var1[[i]]))$X_uuid[1])
  }
}
data_clean = subset(data_clean, !is_in(data_clean$X_index, outliers_index))
outliers_NOTdeleted = subset(outliers, !is_in(outliers$X_index, outliers_index))
rm_outliers = subset(outliers, is_in(outliers$X_index, outliers_index))

for(i in 1:length(outliers_index)){
  qst_name_i = subset(rm_outliers, rm_outliers$X_index == outliers_index[i])$variable
  qst_name = paste(qst_name_i, collapse = " ; ")
  outliers_qst = c(outliers_qst, qst_name)
  qst_value_i = subset(rm_outliers, rm_outliers$X_index == outliers_index[i])$value
  qst_value = paste(qst_value_i, collapse = " ; ")
  outliers_value = c(outliers_value, qst_value)
}

for (i in 1:length(outliers_index)) {
  DataCleaningLogBook = rbind(DataCleaningLogBook, 
                              c(outliers_uuid[i], outliers_index[i],  outliers_qst[i],
                                "Plus de 3 valeurs extremes", "", "Oui", outliers_value[i], "Qst supprimé de la DB"))
}
### Count as incoherent for each outlier and replace by NAs:
for(i in 1:nrow(data_clean)){
  if(is_in(data_clean$X_index[i], outliers_NOTdeleted$X_index)){
    outliers_i = subset(outliers_NOTdeleted,  outliers_NOTdeleted$X_index == data_clean$X_index[i])
    for(j in 1:ncol(data_clean)){
      data_clean[i,j] = ifelse(is_in(colnames(data_clean)[j], outliers_i$variable), "NA", data_clean[i,j])
    }
  }
}
for(i in 1:nrow(outliers_NOTdeleted)){
  DataCleaningLogBook = rbind(DataCleaningLogBook, c(outliers_NOTdeleted$X_uuid[i], outliers_NOTdeleted$X_index[i], outliers_NOTdeleted$variable[i],outliers_NOTdeleted$issue_type[i], "", "Non & compté incohérent", outliers_NOTdeleted$value[i], "NA"))
}




#
## Recode 'other' 
#other_toberecoded = read.csv("./input/other_recoded_PAC.csv", stringsAsFactors = F)
#other_toberecoded = subset(other_toberecoded, other_toberecoded$Réponse.correcte != "")
#liste_qst_other = unique(other_toberecoded$variable)
#
#other_toberecoded$value <- gsub(" /// instances: [0-9]*?$", "",other_toberecoded$value )
#
#for(i in 1:length(unique(other_toberecoded$variable))){
#  other_toberecoded_var = subset(other_toberecoded,other_toberecoded$variable == other_toberecoded$variable[i])
#  data_clean_other_var = select(data_clean, other_toberecoded$variable[i])
#  for (j in 1: nrow(data_clean_other_var)) {
#    if(is_in(data_clean_other_var[j,] , other_toberecoded_var$value)){
#      data_clean_other_var[j,] == subset(other_toberecoded_var, other_toberecoded_var$value ==  data_clean_other_var[j,])$Réponse.correcte
#    }
#  }
#}
#
#other_toberecoded$question_type = match(other_toberecoded$variable, questions$type)
#
#questions
#
#aap_1_1_source_confiance_autre
#
#table(data_clean$aap_1_1_source_confiance_autre ==  "Radio")
#table(data_clean$aap_1_source_confiance)
#
#
#



### Recode locations' names ####
## Import final list of villages needed : 

loc_finales <- read.csv("./input/MSNA_localites_finales_R.csv", stringsAsFactors = F)
loc_finales = loc_finales[order(loc_finales$Sous.préfecture),]


# Clean location names : 
data_clean$Localites_visitees = paste(data_clean$localite, data_clean$village, sep ="")
# replace with name of 'autre' if 'autre' selected
data_clean$Localites_visitees = ifelse(data_clean$village == "autre", data_clean$village_autre, data_clean$Localites_visitees)
for (i in 1: nrow(data_clean)){
  data_clean$Localites_visitees_labels[i] = 
    subset(raw_data_labels, raw_data_labels$X_uuid == data_clean$X_uuid[i])$localite_visitee
  data_clean$admin2_labels[i] = 
    subset(raw_data_labels, raw_data_labels$X_uuid == data_clean$X_uuid[i])$admin2
}

## Correct manually some qst with wrong admin 1
for (i in 1: nrow(data_clean)){
  if(data_clean$admin_2[i] == "Baboua" & data_clean$Localites_visitees_labels[i] == "Béa ahoussa"){
    data_clean$admin_2[i] = "Bouar"
    data_clean$admin2_labels[i] = "Bouar"
    data_clean$Localites_visitees_labels[i] = "Beiya-Gbakounde"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2 & Loc", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Baboua & Béa ahoussa", "Bouar & Beiya-Gbakounde"))
  }
  if(data_clean$admin_2[i] == "Bangui" & data_clean$Localites_visitees_labels[i] == " 7"){
    data_clean$Localites_visitees_labels[i] = "Bangui 7e"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "Loc", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "  7", "Bangui 7e"))
  }
  if(data_clean$admin_2[i] == "Bocaranga" & data_clean$Localites_visitees_labels[i] == "Batayanga"){
    data_clean$admin_2[i] = "Koui"
    data_clean$admin2_labels[i] = "Koui"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Bocaranga", "Koui"))
  }
  if(data_clean$admin_2[i] == "Bocaranga" & data_clean$Localites_visitees_labels[i] == "Majene "){
    data_clean$admin_2[i] = "Ngaoundaye"
    data_clean$admin2_labels[i] = "Ngaoundaye"
    data_clean$Localites_visitees_labels[i] = "Bene"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2 & Loc", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Bocaranga & Majene", "Ngaoundaye & Bene"))
  }
  if(data_clean$admin_2[i] == "Bouar" & data_clean$Localites_visitees_labels[i] == "Alime 2"){
    data_clean$admin_2[i] = "Baboua"
    data_clean$admin2_labels[i] = "Baboua"
    data_clean$Localites_visitees_labels[i] = "Koungoulou (Unknown 50?)"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Bouar", "Baboua"))
  }
  if(data_clean$admin_2[i] == "Kouango" & data_clean$Localites_visitees_labels[i] == "Kouango"){
    data_clean$admin_2[i] = "Bambari"
    data_clean$admin2_labels[i] = "Bambari"
    data_clean$Localites_visitees_labels[i] = "Ngakobo"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2 & Loc", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Kouango & Kouango", "Bambari & Ngakobo"))
  }
  if(data_clean$admin_2[i] == "Mbres" & data_clean$Localites_visitees_labels[i] == "Kanga"){
    data_clean$admin_2[i] = "Kaga_Bandoro"
    data_clean$admin2_labels[i] = "Kaga-Bandoro"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Mbres", "Kaga_Bandoro"))
  }
  if(data_clean$admin_2[i] == "Ouadda" & data_clean$today[i] == "2019-08-14"){
    data_clean$admin_2[i] = "Bria"
    data_clean$admin2_labels[i] = "Bria"
    data_clean$admin_3[i] = "Samba_Boungou"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Ouadda", "Bria"))
  }
  if(data_clean$admin_2[i] == "Kembe" & data_clean$Localites_visitees_labels[i] == "Satema centre"){
    data_clean$admin_2[i] = "Satema"
    data_clean$admin2_labels[i] = "Satema"
    data_clean$Localites_visitees_labels[i] = "Satema"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2 & Loc", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Kembe & Satema centre", "Satema & Satema"))
  }
  if(data_clean$admin_2[i] == "Kouango" & (data_clean$Localites_visitees_labels[i] == "Ngakobo" | 
                                           data_clean$Localites_visitees_labels[i] == "Ngakobo centre" | 
                                           data_clean$Localites_visitees_labels[i] == "Ngakobo centre ville" | 
                                           data_clean$Localites_visitees_labels[i] == "Site des déplacés" | 
                                           data_clean$Localites_visitees_labels[i] == "Site de ngakobo" | 
                                           data_clean$Localites_visitees_labels[i] == "Site ngakobo" | 
                                           data_clean$Localites_visitees_labels[i] == "Site centre" | 
                                           data_clean$Localites_visitees_labels[i] == "Site ngakobo centre" | 
                                           data_clean$Localites_visitees_labels[i] == "Ngakopo" | 
                                           data_clean$Localites_visitees_labels[i] == "Site Ngakobo" | 
                                           data_clean$Localites_visitees_labels[i] == "Kouango" |
                                           data_clean$Localites_visitees_labels[i] == "Site ngakobo centre" | 
                                           data_clean$Localites_visitees_labels[i] == "Site centre" | 
                                           data_clean$Localites_visitees_labels[i] == "Site ngakobo centre" )){
    data_clean$admin_2[i] = "Bambari"
    data_clean$admin2_labels[i] = "Bambari"
    data_clean$Localites_visitees_labels[i] = "Ngakobo"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2 & Loc", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Kouango & Ngakobo centre", "Bambari & Ngakobo"))
  }
  if(data_clean$admin_2[i] == "Sibut" & (data_clean$Localites_visitees_labels[i] == "Kangamotema2 2km de kpabe" | 
                                         data_clean$Localites_visitees_labels[i] == "Kangamote 2/  2km de kpabe"| 
                                         data_clean$Localites_visitees_labels[i] == "Kangamote 2km (kpabe)"| 
                                         data_clean$Localites_visitees_labels[i] == "2km de kpabe a KANGAMOTEMA"| 
                                         data_clean$Localites_visitees_labels[i] == "Kpabe' 2km(kangamote')"| 
                                         data_clean$Localites_visitees_labels[i] == "2km de kpabé(kangamote ma)")){
    data_clean$admin_2[i] = "Ndjoukou"
    data_clean$admin2_labels[i] = "Ndjoukou"
    data_clean$Localites_visitees_labels[i] = "pk2 Kpabe"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2 & Loc", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Sibut & pk2 Kpabe", "Ndjoukou & pk2 Kpabe"))
  }
  if(data_clean$admin_2[i] == "Bangassou" & data_clean$Localites_visitees_labels[i] == "Sambora"){
    data_clean$admin_2[i] = "Rafai"
    data_clean$admin2_labels[i] = "Rafai"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Bangassou", "Rafai"))
  }
  if(data_clean$admin_2[i] == "Bimbo" & data_clean$Localites_visitees_labels[i] == "Boulou2"){
    data_clean$admin_1[i] = "Lobaye"
    data_clean$admin_2[i] = "Mbaiki"
    data_clean$admin2_labels[i] = "Mbaiki"
    data_clean$Localites_visitees_labels[i] = "Belou 2"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_1 & admin_2 & Loc", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Omella MPoko & Bimbo & Boulou2", "Lobaye & Mbaiki & Belou 2"))
  }
  if(data_clean$admin_2[i] == "Mbaiki" & (data_clean$Localites_visitees_labels[i] == "Bombale" |
                                          data_clean$Localites_visitees_labels[i] == "Bombalé")){
    data_clean$admin_2[i] = "Boda"
    data_clean$admin2_labels[i] = "Boda"
    data_clean$Localites_visitees_labels[i] = "Bombale"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2 & Loc", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Mbaiki & Bombalé", "Boda & Bombale"))
  }
  if(data_clean$admin_2[i] == "Mbaiki" & data_clean$Localites_visitees_labels[i] == "Kélé 1"){
    data_clean$admin_2[i] = "Boda"
    data_clean$admin2_labels[i] = "Boda"
    data_clean$Localites_visitees_labels[i] = "Keli 1"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2 & Loc", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Mbaiki & Kélé 1", "Boda & Keli 1"))
  }
  if(data_clean$admin_2[i] == "Kembe" & data_clean$Localites_visitees_labels[i] == "Boungba 1"){
    data_clean$admin_2[i] = "Satema"
    data_clean$admin2_labels[i] = "Satema"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Kembe", "Satema"))
  }
  if(data_clean$admin_2[i] == "Markounda" & data_clean$Localites_visitees_labels[i] == "Koki"){
    data_clean$admin_2[i] = "Nana_Bakassa"
    data_clean$admin2_labels[i] = "Nana-Bakassa"
    data_clean$Localites_visitees_labels[i] = "Gpt Kouki"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2 & Loc", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Markounda & Koki", "Boda & Gpt Kouki"))
  }
  if(data_clean$admin_2[i] == "Bossangoa" & c(data_clean$Localites_visitees_labels[i] == "Gpt Kouki" | 
                                              data_clean$Localites_visitees_labels[i] == "Kouki" )){
    data_clean$admin_2[i] = "Nana_Bakassa"
    data_clean$admin2_labels[i] = "Nana-Bakassa"
    data_clean$Localites_visitees_labels[i] = "Gpt Kouki"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Bossangoa", "Nana_Bakassa"))
  }
  if(data_clean$admin_2[i] == "Bossangoa" & data_clean$Localites_visitees_labels[i] == "Bogali"){
    data_clean$admin_2[i] = "Markounda"
    data_clean$admin2_labels[i] = "Markounda"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Bossangoa", "Markounda"))
  }
  if(data_clean$admin_2[i] == "Kouango" & c(data_clean$Localites_visitees_labels[i] == "Ngakobo" |
                                            data_clean$Localites_visitees_labels[i] == "NGAKOBO")){
    data_clean$admin_2[i] = "Bambari"
    data_clean$admin2_labels[i] = "Bambari"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Kouango", "Bambari"))
  }
  if(data_clean$admin_2[i] == "Mbaiki" & data_clean$Localites_visitees_labels[i] == "Bogombo"){
    data_clean$admin_2[i] = "Bogangolo"
    data_clean$admin2_labels[i] = "Bogangolo"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Mbaiki", "Bogangolo"))
  }
  if(data_clean$admin_2[i] == "Mbaiki" & c(data_clean$Localites_visitees_labels[i] == "Ambauchure" |
                                           data_clean$Localites_visitees_labels[i] == "Enbochure")){
    data_clean$admin_2[i] = "Mongoumba"
    data_clean$admin2_labels[i] = "Mongoumba"
    data_clean$Localites_visitees_labels[i] = "Ambauchure"
    
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Mbaiki", "Mongoumba"))
  }
  if(data_clean$admin_2[i] == "Carnot" & c(data_clean$Localites_visitees_labels[i] == "Mbaina" | 
                                           data_clean$Localites_visitees_labels[i] == "Nbgaina")){
    data_clean$admin_2[i] = "Gadzi"
    data_clean$admin2_labels[i] = "Gadzi"
    data_clean$Localites_visitees_labels[i] = "Mbaina"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Carnot", "Gadzi"))
  }
  if(data_clean$admin_2[i] == "Kembe" & c(data_clean$Localites_visitees_labels[i] == "Satema" |
                                          data_clean$Localites_visitees_labels[i] == "SATEMA CENTRE")){
    data_clean$admin_2[i] = "Satema"
    data_clean$admin2_labels[i] = "Satema"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean$X_uuid[i], data_clean$X_index[i], 
                                                       "admin_2", "Saisie incorrecte de la réponse", "", "Oui & compté incohérent", 
                                                       "Kembe", "Satema"))
  }
}


## Remove data wrong locality:
RM_wrong = subset(data_clean, (data_clean$admin_2 == "Batangafo" & data_clean$Localites_visitees_labels == "Jdfn") |
                    (data_clean$admin_2 == "Boganangone" & data_clean$Localites_visitees_labels == "Boudiola"))
data_clean = subset(data_clean, !is_in(data_clean$X_uuid, RM_wrong$X_uuid))
for (i in 1:nrow(RM_wrong)) {
  DataCleaningLogBook = rbind(DataCleaningLogBook, c(RM_wrong$X_uuid[i], RM_wrong$X_index[i], 
                                                     "Loc", "Saisie incorrecte de la réponse", "", "Oui", "", "Qst supprimé de la DB"))
}

## Remove data done in Djema & Bambouti :
RM_djema_bambouti = subset(data_clean, data_clean$admin_2 == "Djema" | data_clean$admin_2 == "Bambouti")
data_clean = subset(data_clean, !is_in(data_clean$X_uuid, RM_djema_bambouti$X_uuid))
for (i in 1:nrow(RM_djema_bambouti)) {
  DataCleaningLogBook = rbind(DataCleaningLogBook, c(RM_djema_bambouti$X_uuid[i], RM_djema_bambouti$X_index[i], 
                                                     "admin_2", "Qst réalisé en H2R", "", "Oui", "", "Qst supprimé de la DB"))
}

# Check if all SP have same spelling : 
admin_2_tobechecked = c()
for(j in 1:length(unique(data_clean$admin_2))){
  if (!is_in(unique(data_clean$admin_2)[j], unique(loc_finales$Sous.préfecture))){
    admin_2_tobechecked = c(admin_2_tobechecked, unique(data_clean$admin_2)[j])
  }
}  
if(!is.null(admin_2_tobechecked)){warning("The admin 2 in the data are not matching with the 'loc_finales' files' admin_2. NEED TO CHECK!")}



## Standardize the name of localities :
conso_loc <- read.csv("./input/MSNA_consolidation_localites_R.csv", stringsAsFactors = F)

conso_loc_tobecorrected = subset(conso_loc, conso_loc$CORRECTION != "")
conso_loc_tobecorrected$Localites_visitees = ifelse(conso_loc_tobecorrected$Autre != "", conso_loc_tobecorrected$Autre, conso_loc_tobecorrected$Localité)
conso_loc_tobecorrected = select(conso_loc_tobecorrected, c("Sous.préfecture","Localites_visitees", "CORRECTION" ))

colnames(conso_loc_tobecorrected)
conso_loc_2 <- read.csv("./input/MSNA_consolidation_localites_R_2.csv", stringsAsFactors = F)
colnames(conso_loc_2) 
conso_loc_2 = conso_loc_2[,c(2,1,3)]
conso_loc_tobecorrected_2 = subset(conso_loc_2, conso_loc_2$cor_finale != "")
colnames(conso_loc_tobecorrected_2) = colnames(conso_loc_tobecorrected)
conso_loc_tobecorrected = rbind(conso_loc_tobecorrected, conso_loc_tobecorrected_2)
# check if admin_2 spelling matches:
admin_2_tobechecked = c()
for(j in 1:length(unique(conso_loc_tobecorrected$Sous.préfecture))){
  if (!is_in(unique(conso_loc_tobecorrected$Sous.préfecture)[j], unique(data_clean$admin_2))){
    admin_2_tobechecked = c(admin_2_tobechecked, unique(data_clean$admin_2)[j])
  }
}  
if(!is.null(admin_2_tobechecked)){warning("The admin 2 in the data are not matching with the 'conso_loc' files' admin_2. NEED TO CHECK!")}

# all localités to lower case:
conso_loc_tobecorrected$Localites_visitees_min = sapply(conso_loc_tobecorrected$Localites_visitees, tolower) 
data_clean$Localites_visitees_labels_min = sapply(data_clean$Localites_visitees_labels, tolower) 

# Clean the name of localités (all 'localite_final_labels' by admin 2 must be in the files 'loc_finales' by admin 2 !)
data_clean_final = data_clean[c(),]

for(j in 1:length(unique(data_clean$admin_2))){
  data_clean_admin2 = subset(data_clean, data_clean$admin_2 == unique(data_clean$admin_2)[j])
  conso_loc_tobecorrected_admin2 = subset(conso_loc_tobecorrected, conso_loc_tobecorrected$Sous.préfecture == unique(data_clean$admin_2)[j])
  loc_finales_admin2 = subset(loc_finales, loc_finales$Sous.préfecture == unique(data_clean$admin_2)[j])
  for (i in 1: nrow(data_clean_admin2)){
    data_clean_admin2$localite_final_labels[i] = ifelse(is_in(data_clean_admin2$Localites_visitees_labels_min[i], sapply(loc_finales_admin2$Localités, tolower)), 
                                                        data_clean_admin2$Localites_visitees_labels[i],
                                                        subset(conso_loc_tobecorrected_admin2, conso_loc_tobecorrected_admin2$Localites_visitees_min == data_clean_admin2$Localites_visitees_labels_min[i])$CORRECTION)
    if(!is_in(data_clean_admin2$Localites_visitees_labels_min[i], sapply(loc_finales_admin2$Localités, tolower))){
      DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean_admin2$X_uuid[i], data_clean_admin2$X_index[i], 
                                                         "loc", "Saisie incorrecte de la réponse", "", "Oui & compte incohérent",
                                                         data_clean_admin2$Localites_visitees_labels[i], 
                                                         subset(conso_loc_tobecorrected_admin2, conso_loc_tobecorrected_admin2$Localites_visitees_min == data_clean_admin2$Localites_visitees_labels_min[i])$CORRECTION ))
    }
  }
  data_clean_final = rbind(data_clean_final, data_clean_admin2)
}

# data without matching names: 
subset(data_clean_final, is.na(data_clean_final$localite_final_labels) )$Localites_visitees_labels

for (i in 1: nrow(data_clean_final)){
  data_clean_final$localite_final_labels[i] = ifelse(is.na(data_clean_final$localite_final_labels[i]), 
                                                     data_clean_final$Localites_visitees_labels[i],
                                                     data_clean_final$localite_final_labels[i])
}

# Check which localités is not in the 'loc_finales' file :
data_clean_final$Localites_visitees_labels_min_admin2 = paste0(sapply(data_clean_final$localite_final_labels, tolower), " _ ", data_clean_final$admin_2, sep="")
loc_finales$Localites_final_admin2 = paste(sapply(loc_finales$Localités, tolower), " _ ", loc_finales$Sous.préfecture, sep="")

mismatched_loc = subset(data_clean_final, !is_in(data_clean_final$Localites_visitees_labels_min_admin2, loc_finales$Localites_final_admin2))

mismatched_loc = select(mismatched_loc, c("X_uuid", "X_index", "admin_1", "admin_2", "Localites_visitees", "localite_final_labels", "Localites_visitees_labels_min_admin2"))

mismatched_loc_unique = unique(as.data.frame(mismatched_loc$Localites_visitees_labels_min_admin2))
for(i in 1:nrow(mismatched_loc_unique)){
  mismatched_loc_unique$admin_2[i] = subset(mismatched_loc, mismatched_loc$Localites_visitees_labels_min_admin2 == mismatched_loc_unique$`Localites_visitees_labels_min_admin2$localite_final_labels`[i] )$admin_2[1]
}

write.csv(mismatched_loc_unique, "./output/mismatched_loc_unique_0309.csv")



# Delete if IDP in site but not a site 
admin1quota <- read.csv("./input/MSNA_admin1quota_R.csv", stringsAsFactors = F)
admin1quota = admin1quota[-18,]

admin1quota_IDPSite = subset(admin1quota, admin1quota$IDP.site > 0)
modify_IDP_site = subset(data_clean_final, !is_in(data_clean_final$admin_1, admin1quota_IDPSite$Prefecture) & 
                           data_clean_final$ig_8_statut == "IDP_site")

for (i in 1:nrow(data_clean_final)) {
  if(is_in(data_clean_final$X_uuid[i], modify_IDP_site$X_uuid)){
    data_clean_final$ig_8_statut[i] = "IDP_FA"
    DataCleaningLogBook = rbind(DataCleaningLogBook, c(data_clean_final$X_uuid[i], data_clean_final$X_index[i], 
                                                       "ig_8_statut", "Information mal renseignées (PDi en site au lieu de famille d'accueil)", 
                                                       paste("Admin2 = ", data_clean_final$admin_2[i], "& Loc = ", data_clean_final$localite_final_labels[i]), "Oui", "IDP_site", "IDP_FA"))
  }
}



## delete if more than X incoherences (Noted in the Data cleaning log Book) :
DataCleaningLogBook = as.data.frame(DataCleaningLogBook)
data_clean_final$Incoherent_Data = 0
for(i in 1:nrow(data_clean_final)){
  data_clean_final$Incoherent_Data[i] = ifelse(is.na(as.integer(subset(as.data.frame(table(DataCleaningLogBook$index), stringsAsFactors = F), as.data.frame(table(DataCleaningLogBook$index), stringsAsFactors = F)$Var1 == data_clean_final$X_index[i]))[1]),
                                               data_clean_final$Incoherent_Data[i],
                                               as.integer(subset(
                                                 as.data.frame(table(DataCleaningLogBook$index), stringsAsFactors = F), 
                                                 as.data.frame(table(DataCleaningLogBook$index), stringsAsFactors = F)$Var1 == data_clean_final$X_index[i]))[2])
}

table(data_clean_final$Incoherent_Data)
rm_incoherentQST = subset(data_clean_final, data_clean_final$Incoherent_Data >= max_incoheherence)
DataCleaningLogBook = as.matrix(DataCleaningLogBook)
for (i in 1:nrow(rm_incoherentQST)) {
  DataCleaningLogBook = rbind(DataCleaningLogBook, c(rm_incoherentQST$X_uuid[i], rm_incoherentQST$X_index[i], 
                                                     "Qst with too much incoherences", 
                                                     paste0("Qst with too much incoherences (",rm_incoherentQST$Incoherent_Data[i], ")", sep="") , 
                                                     "", "Oui", "", "Qst supprimé de la DB"))
}

DataCleaningLogBook = as.data.frame(DataCleaningLogBook, stringsAsFactors = F)
for (i in 1:nrow(DataCleaningLogBook)) {
  DataCleaningLogBook$feedback[i] = ifelse(is_in(DataCleaningLogBook$uuid[i], rm_incoherentQST$X_uuid), 
                                           "Qst supprimé de la DB", DataCleaningLogBook$feedback[i])
}
data_clean_final = subset(data_clean_final, !is_in(data_clean_final$X_uuid, rm_incoherentQST$X_uuid))

data_rm = subset(raw_data, is_in(raw_data$X_index, subset(DataCleaningLogBook,DataCleaningLogBook$new.value =="Qst supprimé de la DB")$index))

write.csv(DataCleaningLogBook, "./output/DataCleaningLogBook_0309.csv")
write.csv(data_clean_final, "./output/REACH_CAR_MSNA_Final_dataset_0309_clean.csv")



## Check number of qst by group and loc:

# have retournés and rapatriés together:
data_clean_final$ig_8_statut_final = ifelse(data_clean_final$ig_8_statut == "hote", data_clean_final$ig_8_statut, 
                                            ifelse(data_clean_final$ig_8_statut == "IDP_FA",  data_clean_final$ig_8_statut, 
                                                   ifelse(data_clean_final$ig_8_statut == "IDP_site", data_clean_final$ig_8_statut, "Ret_Rap")))
data_clean_sampling_admin2 = as.data.frame(table(data_clean_final$admin_2))
data_clean_sampling_admin1 = as.data.frame.matrix(table(data_clean_final$admin_1, data_clean_final$ig_8_statut_final))

# Import data 
admin1quota <- read.csv("./input/MSNA_admin1quota_R.csv", stringsAsFactors = F)
admin1quota = admin1quota[-18,]
admin2quota <- read.csv("./input/MSNA_admin2quota_R.csv", stringsAsFactors = F)

admin1quota = admin1quota[order(admin1quota$Prefecture),]

checkquota1 = admin1quota
checkquota1$sampling_hote = data_clean_sampling_admin1$hote
checkquota1$sampling_IDPFA = data_clean_sampling_admin1$IDP_FA
checkquota1$sampling_IDPSite = data_clean_sampling_admin1$IDP_site
checkquota1$sampling_Retrap = data_clean_sampling_admin1$Ret_Rap

checkquota1 = checkquota1[,c(1,2,6,3,7,4,8,5,9)]


checkquota2 = admin2quota
checkquota2 = checkquota2[order(checkquota2$Sous_prefecture),]
data_clean_sampling_admin2 = data_clean_sampling_admin2[order(data_clean_sampling_admin2$Var1),]
checkquota2$sampling = data_clean_sampling_admin2

write.csv(checkquota1, "./output/checkquota1_0309.csv")
write.csv(checkquota2, "./output/checkquota2_0309.csv")




#table( data_clean_final$bidons_cap,
#       data_clean_final$volume_total_recipients)
#
#table(raw_data$bidons_cap, raw_data$volume_total_recipients)
#
#rm(check_qst_length, outliers, outliers_NOTdeleted)
#rm(RM_check_qst_length_20, RM_data_withoutConsent, rm_outliers)
#rm(i, max_incoheherence, outliers_index, outliers_qst, outliers_uuid, outliers_value, qst_length, qst_name, qst_name_i,
#   qst_value, qst_value_i)
#rm(conso_loc, conso_loc_tobecorrected, conso_loc_tobecorrected_admin2, data_clean_admin2, loc_finales,loc_finales_admin2, mismatched_loc, mismatched_loc_unique)

